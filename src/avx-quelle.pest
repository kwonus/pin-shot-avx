// AVX-Quelle Grammar - Expressed in PEG
// Copyright (c) 2024, Kevin Wonus
// MIT License

// Short summary:
// command has multiple clauses and optional export/scope/macro support
// each clause is a standalone unit.  Search-Clauses have more granular units/syntax
// search-segment contains zero or one expression and/or any number of assignments
// expression contains [>= 1] fragments
// fragments contain [>= 1] features
// fragments are used to match terms (i.e. word tokens) across the corpus being searched; match logic should consider all features of the fragment/token when deeming it to be matched
//

WHITESPACE = _ { " " | "\t" | "\r" | "\n" }
statement = { avx_rev | singleton | selection_statement }
AVX_QUERY = _{ ^"_AVX_REV_" ~  "=?" }
avx_rev = { AVX_QUERY ~ "4407" }   // grammar rule allows clients to assert expected version compatibility via extern C function call

selection_statement = { (suffixes | (expression_block ~ suffixes?)) ~ directive? }
suffixes = _{ (settings_block ~ scoping_block?) | (scoping_block ~ settings_block?)}
directive = _{ macro_directive | export_directive }
expression_block = { macro_utilization | search }
scoping_block = { filter_macro | filter+ }
settings_block = { assignment_macro | assignment+  }
macro_utilization = _{ hashtag_txt | hashtag_num }
singleton = { exit | help | view | view_bulk | delete | delete_bulk | absorb | set | get | clear }

export_directive = { (output | append | overwrite) }
filter = { FILTER_OP ~ filter_opt }
filter_macro = _{ FILTER_OP ~ macro_utilization }
assignment = { ASSIGN_OP ~ var_opt }
assignment_macro = _{ ASSIGN_OP ~ macro_utilization }
item = { (wildcard | text | pos | pn_pos12 | pos32 | nupos | greek | hebrew | loc | seg | lemma | punc | decoration | delta | entity ) }
fragment = { feature_option ~ (AND ~ feature_option)* }
feature_option = { feature ~ (OR ~ feature)* }
feature = { not? ~ item}

entity = _{SQUIGGLY_OPEN ~ entities ~ SQUIGGLY_CLOSE }
entities = @{ ^"person" | ^"man" | ^"woman" | ^"tribe" | ^"city" | ^"river" | ^"mountain" | ^"animal" | ^"gemstone" | ^"measurement" | ^"any" | ^"any_Hitchcock" }

delta = { ^"/delta/" }

pn = { ^"/1p/" | ^"/2p/" | ^"/3p/" | "/indefinite/" }
noun = { ^"/noun/" | ^"/n/" }
verb = { ^"/verb/" | ^"/v/" }
adj = { ^"/adjective/" | ^"/adj/" }
adv = { ^"/adverb/" | ^"/adv/" }
det = { ^"/determiner/" | ^"/det/" }
art = { ^"/particle/" | ^"/part/" }

most = { noun | verb | adj | adv | det | art }

pro = { ^"/pronoun/" | ^"/pn/" }

pro_neuter = { ^"/pn_neuter/" }
pro_masculine = { ^"/pn_masculine/" | ^"/pn_male/" }
pro_feminine = { ^"/pn_feminine/" | ^"/pn_fem/" }

noun_genitive  = { ^"/noun_genitive/"   | ^"/p_gen/" }
any_genitive   = { ^"/genitive/"      | ^"/any_gen/" }
other_genitive =_{ noun_genitive      | any_genitive }

pro_genitive   = { ^"/pn_genitive/"   | ^"/pn_gen/" }
pro_nominative = { ^"/pn_nominative/" | ^"/pn_nom/" }
pro_objective  = { ^"/pn_objective/"  | ^"/pn_obj/" }
pro_reflexive  = { ^"/pn_reflexive/"  | ^"/pn_rfx/" }

pro_all =_{ pro | pro_neuter | pro_masculine | pro_feminine | pro_genitive | pro_nominative | pro_objective | pro_reflexive }

prep = { ^"/preposition/" | ^"/prep/" }
inter = { ^"/interjection/" | ^"/inter/" }
conj = { ^"/conjunction/" | ^"/conj/" }
num = { ^"/numeric/" | ^"/num/" }

more =_{ prep | inter | conj | num | other_genitive }

wh = { ^"/wh/" }
singular = { ^"/singular/" }
plural = { ^"/pural/" }
pos = { most | more | pro_all | wh | singular | plural | pn }

loc_bob = { ^"/BoB/" }
loc_eob = { ^"/EoB/" }
loc_boc = { ^"/BoC/" }
loc_eoc = { ^"/EoC/" }
loc_bov = { ^"/BoV/" }
loc_eov = { ^"/EoV/" }
loc = { loc_bob | loc_eob | loc_boc | loc_eoc | loc_bov | loc_eov }

seg_hsm = { ^"/Hsm/"  }
seg_csm = { ^"/Csm/"  }
seg_ssm = { ^"/Ssm/"  }
seg_any = { ^"/sm/"   }
seg = { seg_hsm | seg_csm | seg_ssm | seg_any }

punc_any      = { "/_/" }
punc_exclaim  = { "/!/" }
punc_question = { "/?/" }
punc_declare  = { "/./" }
punc_dash     = { "/-/" }
punc_semi     = { "/;/" }
punc_comma    = { "/,/" }
punc_colon    = { "/:/" }
punc_possessive = { "/\'/" }
punc_parenthetical = { "/(/" }
punc_parenthetical_close = { "/)/" }
punc = { punc_any | punc_question | punc_declare | punc_dash | punc_semi | punc_comma | punc_colon | punc_possessive | punc_parenthetical | punc_parenthetical_close }

italics = { ^"/italics/" }
jesus = { ^"/Jesus/" }

exit = { exit_cmd }
exit_cmd = @{ SINGLETON ~ ^"exit" }
help = { help_cmd ~ text* }
help_cmd = @{ SINGLETON ~ ^"exit" }

view = { view_cmd ~ (id | tag) }
view_bulk = { bulk_view_history | bulk_view_macros }
bulk_view_history = _{ history_cmd ~ (date_range | id_range)? }
bulk_view_macros = _{ macros_cmd ~ (wildcard | date_range) }

delete = { delete_cmd ~ (id | tag) }
delete_bulk = { bulk_delete_history | bulk_delete_macros }
bulk_delete_history = _{ history_cmd ~ delete_arg ~ (date_range | all_key) }
bulk_delete_macros = _{ macros_cmd ~ delete_arg ~ (wildcard | date_range | id_range) }

delete_cmd = @{ SINGLETON ~ ^"delete" }
delete_arg = ${ ^"delete" }
macros_cmd = @{ SINGLETON ~ ^"macros" }
history_cmd = @{ SINGLETON ~ ^"history" }
view_cmd = @{ SINGLETON ~ ^"view" }

absorb = { absorb_cmd ~ (id | tag) }
absorb_cmd = @{ SINGLETON ~ ^"absorb" }
clear = { clear_cmd ~ (var | all_key) }
clear_cmd = @{ SINGLETON ~ ^"clear" }
var = { span_key | format_key | lexicon_search_key | lexicon_render_key | lexicon_key | similarity_lemma_key | similarity_word_key | similarity_key }
set = { span_set | format_set | lexicon_search_set | lexicon_render_set | lexicon_set | similarity_set | similarity_lemma_set | similarity_word_set }
get = { span_get | format_get | lexicon_search_get | lexicon_render_get | lexicon_get  | similarity_lemma_get | similarity_word_get | similarity_get | version_get | all_get }

search = { ordered | unordered }   // quoted-searches are ordered // unquoted-searches are unordered
unordered = { fragment+ } // Unordered expression
ordered = { QUOTE ~ fragment ~ (unanchored | fragment)* ~ QUOTE } // Quoted/Ordered expression
unanchored = { ellipsis ~ fragment }

span_key = @{ ^"span" }
span_cmd = @{ SINGLETON ~ span_key }
span_set = { ( (SET ~ span_key) | span_cmd) ~ EQUALS ~ span_option }
span_var = { span_key ~ EQUALS ~ span_option }
span_get = { GET ~ span_key }
span_option = _{ DIGIT_le3 | span_verse }
span_verse = ${ ^"verse" }

lexicon_key = @{ ^"lexicon" }
lexicon_cmd = @{ SINGLETON ~ lexicon_key }
lexicon_set = { ( (SET ~ lexicon_key) | lexicon_cmd) ~ EQUALS ~ lexicon_option }
lexicon_var = { lexicon_key ~ EQUALS ~ lexicon_option }
lexicon_get = { GET ~ lexicon_key }

lexicon_search_cmd = ${ SINGLETON ~ lexicon_search_key }
lexicon_search_set = { ( (SET ~ lexicon_search_key) | lexicon_search_cmd) ~ EQUALS ~ lexicon_option }
lexicon_search_var = { lexicon_search_key ~ EQUALS ~ lexicon_option }
lexicon_search_get = { GET ~ lexicon_search_key }

lexicon_render_cmd = ${ SINGLETON ~ lexicon_render_key }
lexicon_render_set = { ( (SET ~ lexicon_render_key) | lexicon_render_cmd) ~ EQUALS ~ lexicon_option }
lexicon_render_var = { lexicon_render_key ~ EQUALS ~ lexicon_option }
lexicon_render_get = { GET ~ lexicon_render_key }

lexicon_search_key = @{ (^"search" ~ ("." ~ lexicon_key)?) | (lexicon_key ~ "." ~ ^"search") }
lexicon_render_key = @{ (^"render" ~ ("." ~ lexicon_key)?) | (lexicon_key ~ "." ~ ^"render") }

lexicon_option = _{ LEXICONS }
LEXICONS = _{ AVX | AV | DUAL }  // very specific domain for the AVX driver/parser implementation
AVX = ${ ^"modern" | ^"avx" }
AV = ${ ^"kjv" | ^"av" }
DUAL = ${ ^"dual" | ^"both" }

similarity_key = @{ ^"similarity" }
similarity_cmd = @{ SINGLETON ~ similarity_key }
similarity_set = { ( (SET ~ similarity_key) | similarity_cmd) ~ EQUALS ~ similarity_opt }
similarity_var = { similarity_key ~ EQUALS ~ similarity_opt }
similarity_get = { GET ~ similarity_key }

similarity_word_cmd = ${ SINGLETON ~ similarity_word_key }
similarity_word_set = { ( (SET ~ similarity_word_key) | similarity_word_cmd) ~ EQUALS ~ similarity_opt }
similarity_word_var = { similarity_word_key ~ EQUALS ~ similarity_opt }
similarity_word_get = { GET ~ similarity_word_key }

similarity_lemma_cmd = ${ SINGLETON ~ similarity_lemma_key }
similarity_lemma_set = { ( (SET ~ similarity_lemma_key) | similarity_lemma_cmd) ~ EQUALS ~ similarity_opt }
similarity_lemma_var = { similarity_lemma_key ~ EQUALS ~ similarity_opt }
similarity_lemma_get = { GET ~ similarity_lemma_key }

similarity_word_key = @{ (similarity_key ~ ".")? ~ ^"word" }
similarity_lemma_key = @{ (similarity_key ~ ".")? ~ ^"lemma" }

similarity_opt = ${ FULL | NONE | FUZZY }

NONE = ${ ^"off" }
FULL = ${ "100" ~ PERCENT }
THIRTY_SOMETHING = ${ "3" ~ ('3' .. '9') }
FORTY_PLUS = ${ ('4' .. '9') ~ ('0' .. '9') }

FUZZY = ${ (THIRTY_SOMETHING | FORTY_PLUS) ~ PERCENT } // legal thresholds are from 33 to 99 (100% is excluded because that would represent an exact-match

format_key = @{ ^"format" }
format_cmd = @{ SINGLETON ~ format_key }
format_set = { ( (SET ~ format_key) | format_cmd) ~ EQUALS ~ format_option }
format_var = { format_key ~ EQUALS ~ format_option }
format_get = { GET ~ format_key }
format_option = _{ html | markdown | textual | json | yaml }
html = @{ ^"html" }
markdown = @{ ^"markdown" | ^"md" }
textual = @{ ^"text" | ^"utf8" }
json = @{ ^"json" }
yaml = @{ ^"yaml" }

all_key = @{ ^"all" }
all_var = {all_key ~ EQUALS ~ all_option }
all_get = { GET ~ all_key? }
all_option = _{ current | defaults }

filter_opt = _{ filter_spec ~ chapter_range* }
filter_spec = { onetwothree* ~ text+ }
chapter_range = { ((DIGIT_byte ~ (HYPHEN ~ DIGIT_byte)?) ~ COMMA?) }
onetwothree = _{ ('1' .. '3') }
bookNum  = ${ ('1' .. '9') | (('1' .. '5') ~ DIGIT) ~ ( "6" ~ ('1' .. '6')) } // 1-66
var_opt = _{ span_var | lexicon_var | lexicon_search_var | lexicon_render_var | similarity_var | similarity_lemma_var | similarity_word_var | format_var | all_var }
get_opt = { span_get | lexicon_get | lexicon_search_get | lexicon_render_get | similarity_get | similarity_lemma_get | similarity_word_get | format_get | version_get | all_get }
macro_directive = { "||" ~ tag }

tag_parameter = _{ tag | wildcard }
hashtag_txt = ${ POUND ~ tag }
hashtag_num = ${ POUND ~ id }
id = ${ ('1' .. '9') ~ ( '0' .. '9')* }

decoration = { italics | jesus }
pos32 = @{ BRACE_OPEN ~ HEX32 ~ BRACE_CLOSE }
pn_pos12 = @{ BRACE_OPEN ~ HEX16 ~ BRACE_CLOSE }
greek = @{ DIGITS ~ ^":G" }
hebrew = @{ DIGITS ~ ^":H" }

lemma = { PAREN_OPEN ~ text ~ PAREN_CLOSE }

wildcard = ${ (term_begin | STAR) ~ term_contains* ~ term_end? }

ellipsis = _{ "..." }

append = { ">>" ~  filename }
output = { ">" ~ filename }
overwrite = { "=>" ~ filename }

FILESPEC = @{ ('a' .. 'z' | 'A' .. 'Z' | DIGIT) | "/" | "\\" | "-" | "_" | ":" }
quoted_filespec = ${ QUOTE ~ FILESPEC ~ (FILESPEC | " ")+ ~ QUOTE }
unquoted_legal = ${ FILESPEC+ }
filename = { quoted_filespec | unquoted_legal }

nupos = { BRACE_OPEN ~ (
	^"a-acp" |
	^"av" |
	^"av-an" |
	^"av-c" |
	^"avc-jn" |
	^"av-d" |
	^"av-dc" |
	^"av-ds" |
	^"av-dx" |
	^"av-j" |
	^"av-jc" |
	^"av-jn" |
	^"av-js" |
	^"av-n1" |
	^"av-s" |
	^"avs-jn" |
	^"av-vvg" |
	^"av-vvn" |
	^"av-x" |
	^"c-acp" |
	^"cc" |
	^"cc-acp" |
	^"c-crq" |
	^"ccx" |
	^"crd" |
	^"cs" |
	^"cst" |
	^"d" |
	^"dc" |
	^"dg" |
	^"ds" |
	^"dt" |
	^"dx" |
	^"fw-es" |
	^"fw-fr" |
	^"fw-ge" |
	^"fw-gr" |
	^"fw-it" |
	^"fw-la" |
	^"fw-mi" |
	^"j" |
	^"j-av" |
	^"jc" |
	^"jc-jn" |
	^"jc-vvg" |
	^"jc-vvn" |
	^"j-jn" |
	^"j-u" |
	^"j-vvnu" |
	^"jp" |
	^"js" |
	^"js-jn" |
	^"js-vvg" |
	^"js-vvn" |
	^"j-vvg" |
	^"j-vvn" |
	^"n1" |
	^"n1-an" |
	^"n1-j" |
	^"n11vbz" |
	^"n2" |
	^"n2-acp" |
	^"n2-an" |
	^"n2-av" |
	^"n2-dx" |
	^"n2-j" |
	^"n2-jn" |
	^"n2-vdg" |
	^"n2-vhg" |
	^"n2-vvg" |
	^"n2-vvn" |
	^"ng1" |
	^"ng1-an" |
	^"ng1-j" |
	^"ng1-jn" |
	^"ng1-vvn" |
	^"ng2" |
	^"ng2-jn" |
	^"n-jn" |
	^"njp" |
	^"njp2" |
	^"njpg1" |
	^"njpg2" |
	^"np1" |
	^"np2" |
	^"npg1" |
	^"npg2" |
	^"np-n1" |
	^"np-n2" |
	^"np-ng1" |
	^"np1-n" |
	^"n-vdg" |
	^"n-vhg" |
	^"n-vvg" |
	^"n-vvn" |
	^"ord" |
	^"p-acp" |
	^"pc-acp" |
	^"pi" |
	^"pi2" |
	^"pi2x" |
	^"pig" |
	^"pigx" |
	^"pix" |
	^"pn22" |
	^"pn31" |
	^"png11" |
	^"png12" |
	^"png21" |
	^"png22" |
	^"png31" |
	^"png32" |
	^"pno11" |
	^"pno12" |
	^"pno21" |
	^"pno31" |
	^"pno32" |
	^"pns11" |
	^"pns12" |
	^"pns21" |
	^"pns31" |
	^"pns32" |
	^"po11" |
	^"po12" |
	^"po21" |
	^"po22" |
	^"po31" |
	^"po32" |
	^"pp" |
	^"pp-f" |
	^"px11" |
	^"px12" |
	^"px21" |
	^"px22" |
	^"px31" |
	^"px32" |
	^"pxg21" |
	^"q-crq" |
	^"r-crq" |
	^"ro-crq" |
	^"qo-crq" |
	^"rg-crq" |
	^"n-crq" |
	^"sy" |
	^"uh" |
	^"uh-av" |
	^"uh-crq" |
	^"uh-dx" |
	^"uh-j" |
	^"uh-jn" |
	^"uh-np" |
	^"uh-n" |
	^"uh-v" |
	^"uh-x" |
	^"vb2" |
	^"vb2-imp" |
	^"vb2r" |
	^"vb2x" |
	^"vbb" |
	^"vbbx" |
	^"vbd" |
	^"vbds" |
	^"vbd2s" |
	^"vbdr" |
	^"vbd2r" |
	^"vbd2" |
	^"vbd2x" |
	^"vbdp" |
	^"vbdx" |
	^"vbg" |
	^"vbi" |
	^"vbm" |
	^"vbmx" |
	^"vbn" |
	^"vbp" |
	^"vbr" |
	^"vbz" |
	^"vbzx" |
	^"vd2" |
	^"vd2-imp" |
	^"vd2x" |
	^"vdb" |
	^"vdbx" |
	^"vdd" |
	^"vdd2" |
	^"vdd2x" |
	^"vddp" |
	^"vddx" |
	^"vdg" |
	^"vdi" |
	^"vdn" |
	^"vdp" |
	^"vdz" |
	^"vdzx" |
	^"vh2" |
	^"vh2-imp" |
	^"vh2x" |
	^"vhb" |
	^"vhbx" |
	^"vhd" |
	^"vhd2" |
	^"vhdp" |
	^"vhdx" |
	^"vhg" |
	^"vhi" |
	^"vhn" |
	^"vhp" |
	^"vhz" |
	^"vhzx" |
	^"vm2" |
	^"vm2x" |
	^"vmb" |
	^"vmb1" |
	^"vmbx" |
	^"vmd" |
	^"vm2" |
	^"vmd2" |
	^"vmd2x" |
	^"vmdp" |
	^"vmdx" |
	^"vmi" |
	^"vmn" |
	^"vmp" |
	^"vv2" |
	^"vv2-imp" |
	^"vv2x" |
	^"vvb" |
	^"vvbx" |
	^"vvd" |
	^"vvd2" |
	^"vvd2x" |
	^"vvdp" |
	^"vvdx" |
	^"vvg" |
	^"vvi" |
	^"vvn" |
	^"vvp" |
	^"vvz" |
	^"vvzx" |
	^"xx" |
	^"zz") ~ BRACE_CLOSE }

id_range = _{ (id_from ~ id_until?) | (id_until ~ id_from?) }
id_from = { ^"from" ~ id }
id_until = { ^"to" ~ id }

date_range = _{ (date_from ~ date_until) | (date_until ~ date_from) | date_until | date_from }
date_from = { ^"from" ~ yyyymmdd }
date_until = { ^"to" ~ yyyymmdd }
yyyymmdd = _{ yyyymmdd_slash | yyyymmdd_slash }
yyyymmdd_slash = ${ yyyy ~ "/" ~ mm ~ "/" ~ dd }
yyyymmdd_dash = ${ yyyy ~ "-" ~ mm ~ "-" ~ dd }
yyyy= ${ "20" ~ DIGIT ~ DIGIT }
mm = ${ DIGIT ~ DIGIT? }
dd = ${ DIGIT ~ DIGIT? }

DIGIT = _{ '0' .. '9' }
HEX = _{ DIGIT | ('a' .. 'f') | ('A' .. 'F') }
DIGITS = ${ DIGIT+ }
DIGIT_ge5 = ${DIGIT ~ DIGIT ~ DIGIT ~ DIGIT ~ DIGIT+ }
DIGIT_le2 = ${DIGIT ~ DIGIT? }
DIGIT_le3 = ${DIGIT ~ DIGIT? ~ DIGIT? }
DIGIT_byte = ${ (("0" | "1" | "2") ~ DIGIT ~ DIGIT) | (DIGIT ~ DIGIT?) }
HEX16 = ${ HEX ~ HEX ~ HEX ~ HEX }
HEX32 = ${ HEX ~ HEX ~ HEX ~ HEX ~ HEX ~ HEX ~ HEX ~ HEX }
AND = _{ "&" }

tag = ${ LABEL_FIRST_CHAR ~ LABEL_CHAR* }
LABEL_CHAR = _{ (DIGIT | "-" | "_" | LABEL_FIRST_CHAR) }
LABEL_FIRST_CHAR = _{ ( 'a' .. 'z' | 'A' .. 'Z') }

version_get = { GET ~ VERSION_VAR }
version_key = @{ ^"version" }
revision_key = @{ ^"revision" }
VERSION_VAR = _{ version_key | revision_key }

SQUIGGLY_CLOSE = _{ "}" }
SQUIGGLY_OPEN = _{ "{" }
PAREN_CLOSE = _{ ")" }
PAREN_OPEN = _{ "(" }
BRACE_CLOSE = _{ "]" }
BRACE_OPEN = _{ "[" }
OR = _{ "|" }
POUND = _{ "#" }
FILTER_OP = _{ "<" }
QUOTE = _{ "\"" }
ASSIGN_OP = _{ "+" }
EQUALS = _{ "=" }
STAR = _{ "*" }
COMMA = _{ "," }
SPACE = _{ " " }
PERCENT = _{ "%" }
SET = _{ set_command }
set_command = ${ SINGLETON ~ ^"set" }
GET = _{ get_command }
get_command = ${ SINGLETON ~ ^"get" }
SINGLETON = _{ "@" }
not = { "-" }

current = ${ ^"current" }
defaults = ${ ^"defaults" }

term_contains = ${ text ~ STAR }
term_end = ${ text }
term_begin = ${ text ~ STAR }
text = ${ ALPHA+ }
ALPHA = _{ 'a' .. 'z' | 'A' .. 'Z' }